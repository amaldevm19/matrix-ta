
<div class="row justify-content-end">
    <div class="col-md-3">
        <button class="btn btn-outline-success" type="button" data-bs-toggle="modal" data-bs-target="#upload_modal">Upload CSV</button>
    </div>
    <div class="col-md-3"></div>
    <div class="col-md-3">
        <form class="d-flex flex-row my-2 my-lg-0">
            <input class="form-control mr-sm-2" type="search" placeholder="Search by Code or Name" aria-label="Search" id="searchElement">
            <button class="btn btn-outline-success" type="submit" id="searchSubmit">Search</button>
        </form>
    </div>
</div>
<div id="loading-indicator">
    <div class="spinner-border text-primary" role="status">
        <span class="sr-only">Loading...</span>
    </div>
</div>

<div class="mt-2" id="csvTable"></div>
<div class="mt-2" id="tempCsvTable" hidden></div>

<input type="text" value="{{session.user.EmployeeId}}" id="employeeId" hidden>
<input type="text" value="{{session.user.Department}}" id="department" hidden>

<div class="modal fade " id="upload_modal" tabindex="-1" aria-labelledby="upload_modal_label" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="upload_modal_label">Upload Job List CSV file</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body d-flex align-items-center">
            <div class="d-inline-block mx-4">
                <input type="file" class="form-control" name="JobFile" id="job_file" accept=".csv" />
            </div>
            <div class="d-inline-block">
                <button class="btn btn-primary " data-bs-dismiss="modal" id="submitFile">Upload</button>
            </div>
      </div>
      <div class="modal-footer">
        
      </div>
    </div>
  </div>
</div>

<script>
  
</script>

<script>
    $(document).ready(()=>{
          var table = new Tabulator("#csvTable", {
        pagination:true, //enable pagination
        paginationMode:"remote", //enable remote pagination
        ajaxURL:"/api/jobs/joblist", //ajax URL
        ajaxParams: function(){
            let searchElement = document.querySelector('#searchElement')
            let searchField = searchElement.value;
            return {searchField};
        },
        paginationSize:15, //optional parameter to request a certain number of rows per page
        paginationInitialPage:1, //optional parameter to set the initial page to load
        layout:"fitColumns", //fit columns to width of table (optional)
        paginationSizeSelector:[10, 25, 30,31, 50, 100, 500, 1000, 5000],
        columns:[ //Define Table Columns
            {title:"Row Num", field:"JobID", width:150},
            {title:"Job Code", field:"JobCode", hozAlign:"left"},
            {title:"Job Name", field:"JobName"},
            {title:"Contract Hour /Day", field:"MaxJobHourPerDay",editor:"input", editorParams:{search:true,selectContents:true,elementAttributes:{maxlength:"4"},},},
            {title:"Break Hour /Day", field:"BreakHour",editor:"input", editorParams:{search:true,selectContents:true,elementAttributes:{maxlength:"4"},},},
            {title:"Travel Hour /Day", field:"TravelHour",editor:"input", editorParams:{search:true,selectContents:true,elementAttributes:{maxlength:"4"},},},
            {title:"Project Type", field:"ProjectType",editor:"list", editorParams:{
                values:["Camp","Bus","Site"]
                },},
            {title:"Department", field:"DepartmentId"},
            {title:"Updated By", field:"UpdatedBy"},
            {title:"Updated At", field:"UpdatedAt",hozAlign:"center"},
        ],
    });

    function checkHour(cell,oldValue,newValue){
        if(oldValue == newValue){
            return true;
        }else if (newValue < 0 || newValue > 24.0 ){
            alert("Please enter Hour between 0 and 23.9")
            cell.setValue(oldValue)
            return true;
        }
    }

    table.on("cellEdited", async function(cell){
            let row = cell.getRow()
            let JobCode = row.getData("JobCode").JobCode;
            let newValue = cell.getValue();
            let oldValue = cell.getOldValue();
            let MaxJobHourPerDay = row.getData("MaxJobHourPerDay").MaxJobHourPerDay;
            MaxJobHourPerDay = parseFloat(MaxJobHourPerDay).toFixed(1)
            let BreakHour = row.getData("BreakHour").BreakHour;
            BreakHour = parseFloat(BreakHour).toFixed(1)
            let TravelHour = row.getData("TravelHour").TravelHour;
            TravelHour = parseFloat(TravelHour).toFixed(1)
            let ProjectType = row.getData("ProjectType").ProjectType;
            let EmployeeId = document.querySelector('#employeeId').value;
            let Department = document.querySelector('#department').value;
            //console.log(`MaxJobHourPerDay=${MaxJobHourPerDay}, BreakHour=${BreakHour}, TravelHour=${TravelHour}, ProjectType=${ProjectType}`)
            
            let column = cell.getColumn();
            let field = column.getField();
            console.log(`Field = ${field}`);
            if(field=='MaxJobHourPerDay' || field=='TravelHour' || field=='BreakHour'){
                if(checkHour(cell,oldValue,newValue)) return;
            }
            
            let response = await updateData({MaxJobHourPerDay,BreakHour,TravelHour,JobCode,ProjectType, UpdatedBy:EmployeeId,Department })
            if(response.status == "ok"){
                row.update(response.data);
            }else{
                alert(response.error);
                location.reload();
            }

             
    });

    let updateData = async(data)=>{
        const response = await fetch("/api/jobs/joblist", {
            method: "POST",
            mode: "cors", 
            cache: "no-cache",
            credentials: "same-origin",
            headers: {"Content-Type": "application/json",},
            redirect: "follow",
            referrerPolicy: "no-referrer",
            body: JSON.stringify(data),
         });
        return response.json(); // parses J
    }


    let searchSubmit = document.querySelector('#searchSubmit');
    let searchElement = document.querySelector('#searchElement')
    searchSubmit.addEventListener("click",(e)=>{
        e.preventDefault();
        table.setData("/api/jobs/joblist", {page:"1", pageSize:"15",searchField:searchElement.value});
    })


        const fileInput = $('#job_file')
        const submitFile = $('#submitFile')
        const UpdatedBy = $('#employeeId').val()
        let file = null
        fileInput.change((e)=>{
            e.preventDefault();
            file = e.target.files[0];
        })

        let tempCsvTable = new Tabulator("#tempCsvTable", {
            columns:[ //Define Table Columns
                {title:"Row Num", field:"RowNum"},
                {title:"Job Code", field:"JobCode"},
                {title:"MaxJobHourPerDay", field:"MaxJobHourPerDay"},
                {title:"BreakHour", field:"BreakHour"},
                {title:"TravelHour", field:"TravelHour"},
                {title:"ProjectType", field:"ProjectType"},
                {title:"Department", field:"DepartmentId"},
                {title:"Status", field:"Status"},
                {title:"Message", field:"Message"},
            ],
        });
        submitFile.click(async(e)=>{
            showLoadingIndicator();
            const schema = joi.object({
                RowNum: joi.number(),
                MaxJobHourPerDay: joi.number().min(0).max(24).precision(2).required(),
                BreakHour: joi.number().min(0).max(24).precision(2).required(),
                TravelHour: joi.number().min(0).max(24).precision(2).required(),
                ProjectType: joi.string().required(),
                JobCode: joi.string().required(),
                DepartmentId: joi.number()
            });
            if (!file || file.type !== 'text/csv') {
                alert('Please choose a CSV file');
                return;
            }
            try{
                const {jsonData,errorData} = await parseCSV(file,schema);
                if (!jsonData.length) {
                    alert('Selected file data not matching with required data');
                    return;
                }
                const response = await axios.post('/api/jobs/max-jobhr-scv', {jsonData,UpdatedBy}, {
                    headers: {
                        'Content-Type': 'application/json',
                    },
                });
                if (response.data) {
                    console.log(response.data)
                    let fail = false;
                    
                    response.data.data.forEach((e)=>{
                        if(e.Status == "Fail"){
                            fail= true
                        }
                    })
                    $('#file').val('');
                    hideLoadingIndicator();
                    if(fail){
                        alert("Some row failed to update, please see response CSV")
                    }
                    //alert(`Successfully updated : ${response.data?.data?.length} rows`);
                    //location.reload()
                    
                    tempCsvTable.setData(response.data.data);
                    tempCsvTable.download("csv", "JobHourSettingStatus.csv", {delimiter:","})
                    location.reload()
                }

            }catch(error){
                console.error(error);
            }
        })
    })
</script>